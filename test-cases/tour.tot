title "tour"
description "This file contains the usage of every feature in the Tot spec."

spec-version {
    major 0
    minor 1
    patch 0
}

contributors [
    "you-win"
]

/*******************************************************************************
The real tests start below
*******************************************************************************/

// Basics

unit-val null
bool-val true
number-val 123
string-val "success!"
list-val []
dict-val {}
referenced-val &title
(gen generator-dict [] {})
(gen generator-list [] [])
(gen generator-expression [] null)

// Unit values

my-cool-unit null

// Boolean values

other-bool false

// Number values

looks-like-int 10
looks-like-float 10.10

// String values

single-line-string "hello world!"

multiline-string "
this
goes
multiple
lines
"

multiline-string-fancy
"
this /* combo breaker */ has inner comments and line comments // poof!
/* c-c-c-combo breaker */along with \"escaped\" quotes and 'single quotes'
"

// List values

basic-list [ 1, 2, 3 ]

list-with-values [
    true,
    123 // notice the lack of trailing comma
    "string"
    "multiline
string"
    [
        "an inner list"
        true
    ]
    // nested duplicate dicts
    {
        inner-list [
            {
                inner-list null
            }
        ]
    }
]

list-with-dicts [
    {}, // This one is empty
    {/* inner comment in an empty dict */}
    {
        this-one-has-a-unit-key null
    },
    {
        inner "content"
    }
    {
        inner {
            nested-inner {}
        }
    }
]

// Dict values

basic-dict {
    name "My Dictionary"
    value 10
    10 "number keys are valid since all keys are always parsed as strings"
}

nesting-dict {
    inner-list [
        [
            {
                name "Anonymous Dictionary"
            }
        ]
    ]
    inner-empty-dict {/* spooky comment */}
    inner-dict {
        name "Inner Dictionary"
    }
}

// References

referenced-description (& description)

// This is basically a no-op, as nothing should happen and both will be unit values
unit-reference-dummy null
unit-reference-test (& unit-reference-dummy)

reference-list-dummy [
    1
    [
        2
    ]
    {
        value 3
    }
    [
        [
            {
                decoy-turtle "üê¢"
            }
            {
                value 4
            }
        ]
    ]
]

reference-list-test-raw (& reference-list-dummy)
reference-list-test-1 (& reference-list-dummy 0)
// We can also access members of a referenced reference
reference-list-test-2 (& reference-list-test-raw 1 0)
reference-list-test-3 (& reference-list-dummy 2 "value")
reference-list-test-4 (& reference-list-dummy 3 0 1 "value")

reference-dict-dummy {
    1 1
    2 [
        2
    ]
    3 {
        value 3
    }
    4 {
        value [
            {
                value 4
            }
        ]
    }
}

reference-dict-test-raw (& refernce-dict-dummy)
reference-dict-test-1 (& reference-dict-dummy 0)
reference-dict-test-2 (& reference-dict-dummy 1 0)
reference-dict-test-3 (& reference-dict-dummy 2 "value")
reference-dict-test-4 (& reference-dict-dummy 3 "value" 0 "value")

// Generators

// Transformation generator that does nothing
(gen unit-gen [] null)
gen-unit-test (unit-gen)

(gen simple-boolean-gen [] true)
simple-boolean-gen-test (simple-boolean-gen)

(gen passthrough-boolean-gen [bool] bool)
passthrough-boolean-gen-test (passthrough-boolean-gen false)

(gen number-gen [n] (+ n 1))
number-gen-test (number-gen 10)

(gen string-gen [name] (+ "hello " (+ name "!")))
string-gen-test (string-gen "Tim")

(gen dict-gen [name age description] {
    name name
    age (+ age 1)
    description description
    common "this is a common key"
})
dict-gen-test [
    (dict-gen "Person 1" 10 "my cool person")
    (dict-gen "Person 2" 100)
    (dict-gen "Person 2" 100) // Intentionally duplicated
]

// Expressions

// Note that expressions can only be used as values, never as keys
number-expression (- 10 1)
string-concat-expression (+ "hello " "world")
nested-string-concat-expression (+ "hello" (+ " " "world"))
